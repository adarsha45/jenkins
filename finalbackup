#!/usr/bin/env groovy
def BUILD_NUMBER=env.BUILD_NUMBER
this is a first changes
this is a second changes
this is third changes

def createScratchOrg(ORG_ALIAS) {
    stage('Create Scratch Org'){
            sh "sfdx force:org:create -a ${ORG_ALIAS} -f test/config/project-scratch-def.json -d 1 -v adarshashrestha957@wise-otter-uzvs4t.com"
            sh "sfdx force:user:password:generate -u ${ORG_ALIAS} "
            def datas = sh(script: "sfdx force:user:display -u ${ORG_ALIAS} --json", returnStdout: true)
            def resultpass = readJSON text: datas
            def password = resultpass.result.password
            def username = resultpass.result.username
            writeFile file: "$JENKINS_HOME/scratch-org-credentials/${ORG_ALIAS}", text: "${ORG_ALIAS}\n$username\n$password"
            sh "sfdx force:user:permset:assign -n CQ_System_Administrator -u ${ORG_ALIAS}";
    }     
     // Deploy main package to corresponding org
    stage("Deploy Main Package to  Org ${ORG_ALIAS}"){
            echo "Deploying Main Pacakge"
            sh "sfdx force:source:deploy -u ${ORG_ALIAS} -w 200 -p build/antscripts/bin/src"
    }
    
     // Deploy External Source to corresponding org
    stage("Deploy ExternalSrc to ORG ${ORG_ALIAS}"){
        echo "Deploying External Source"
        sh "sfdx force:mdapi:deploy -d build/antscripts/bin/extPkg/src -u ${ORG_ALIAS} -w 200"
    }
     // Deploy External Source to corresponding org
    stage("Deploy ExternalSrc to ORG ${ORG_ALIAS}"){
        echo "Deploying External Source"
        sh "sfdx force:mdapi:deploy -d build/antscripts/bin/extPkg/src -u ${ORG_ALIAS} -w 200"
    }
    
     // Deploy CQUI Package to corresponding org
    stage("Deploy UI Packages to ORG ${ORG_ALIAS}"){
        echo "Deploying force-app..."
        sh "sfdx force:source:deploy -p build/antscripts/bin/extensions/cq-form/force-app -u ${ORG_ALIAS} -w 200"
            
        echo "Deploying dependent..."
        sh "sfdx force:source:deploy -p build/antscripts/bin/extensions/cq-form/dependent -u ${ORG_ALIAS} -w 200"
            
        echo "Deploying externalPackage..."
        sh "sfdx force:mdapi:deploy -d build/antscripts/bin/extensions/cq-form/externalPackage -u ${ORG_ALIAS} -w 200"
    }
 
        // Run Apex Script as post deployment Actions
    stage("Execute Post Deployment Actions in ${ORG_ALIAS}"){
        
        echo "Running Apex"
        sh "sfdx force:apex:execute -u ${ORG_ALIAS} -f scripts/apex/Create_CustomSetting_CQSetting_Record.apex" 
        sh "sfdx force:apex:execute -u ${ORG_ALIAS} -f scripts/apex/LibraryAssignment.apex" 
        sh "sfdx force:apex:execute -u ${ORG_ALIAS} -f scripts/apex/StartSchedulerJobs.apex" 
    }
}
// define stages to run in parallel to create and deploy package for numberOfOrgs provided from parameter

//   if (fileExists("${JENKINS_HOME}/scratch-org-credentials")) {
//                     def fileList = sh(script: "ls $JENKINS_HOME/scratch-org-credentials | wc -l", returnStdout: true).trim()
//             int numScratchOrgs = fileList as int
//                 //Create a total of 10 number of scratch org
//             int remainingScratchOrgs = 5 - numScratchOrgs
//     }
//     echo "${remainingScratchOrgs}"
// def stages = [failFast: true]
  

// int remainingScratchOrgs
// echo "hello "
// for (int i = 0; i<remainingScratchOrgs; i++) {
//     echo "this is me"
//     // properties([
//     //     parameters([
//     //         string(name:'sqxBranchName',defaultValue:'DOPS-131', description:'Enter the commit hash or branch number'),
//     //             string(name:'uiBranchName',defaultValue:'12.0.0', description:'Specify cqForm branch to deploy'),
//     //                     // string(name:'devHubUsername',defaultValue:'example@devhub.cq.com', description:'Enter Devhub username which will be used to create the scratch org')
//     //             ])
//     //         ])
//                 //alias the loop variable to refer it in the closure
//     def vmNumber = i 
//     println i
//     def ORG_ALIAS = 'CQDevOrg'+String.valueOf(vmNumber)+String.valueOf(BUILD_NUMBER);
//     stages["Create and Deploy to Org ${ORG_ALIAS}"] = {
//             // Create number of org specified
//         stage("Setup Org ${ORG_ALIAS}") {
//             sh "sfdx force:org:create -a ${ORG_ALIAS} -f test/config/project-scratch-def.json -d 3 -v adarshashrestha957@wise-otter-uzvs4t.com"
//             sh "sfdx force:user:password:generate -u ${ORG_ALIAS}"
//             def datas = sh(script: "sfdx force:user:display -u ${ORG_ALIAS} --json", returnStdout: true)
//             def resultpass = readJSON text: datas
//             def password = resultpass.result.password
//             def username = resultpass.result.username
//                  //Store the credential in jenkins global directory
//             writeFile file: "$JENKINS_HOME/scratch-org-credentials/${ORG_ALIAS}", text: "${ORG_ALIAS}\n$username\n$password"
//             }
//         }
// }
node{
    // stage("clone"){
    //     sh 'git clone -b main https://github.com/adarsha45/scratchorg.git test'
    // }
    // checkout scm;
    // withCredentials([file(credentialsId: 'SERVER_KEY', variable:'jwt_key_file'), string(credentialsId: 'CLIENT_ID', variable:'cq_consumer_secret')])
    // {   
    //     stage('Authorize devhub'){
    //         //check if devhub is already authorized and connected
    //         try {
    //             sh "sfdx force:auth:logout --targetusername ${DEFAULT_DEVHUB_USER} --noprompt"
    //         } catch (Exception e) {
    //             //continue if no org exists to logout
    //         }
    //         sh 'sfdx auth:jwt:grant --instanceurl ${INSTANCE_URL} --clientid ${cq_consumer_secret} --username ${DEFAULT_DEVHUB_USER} --jwtkeyfile ${jwt_key_file} --setdefaultdevhubusername'
    //     }
    // }
    properties([
        parameters([
            string(name:'sqxBranchName',defaultValue:'development/13.0.0', description:'Enter the commit hash or branch number'),
            string(name:'numberOfOrgs',defaultValue:'1', description:'Number of orgs to create'),
            string(name:'uiBranchName',defaultValue:'13.0.0', description:'Specify cqForm branch name if sqx is less than 13.'),
            string(name:'durationOfOrg',defaultValue:'21', description:'Enter duration for org creation in days'),
            string(name:'devHubUsername',defaultValue:'example@devhub.cq.com', description:'Enter Devhub username which will be used to create the scratch org')
        ])
    ])
    
    checkout([
        $class: 'GitSCM', 
        branches: [[name: sqxBranchName]], 
        extensions: [
            [
                $class: 'SubmoduleOption',
                disableSubmodules: false,
                parentCredentials: true,
                recursiveSubmodules: true,
                trackingSubmodules: true
            ]
            ,[
                $class: 'WipeWorkspace'
            ]
        ],
        userRemoteConfigs: [[credentialsId : 'BitbucketJenkinsCredential', url: 'https://bitbucket.org/ambarkaar/sqx.git']]])
        
    stage("Checkout UI Branch ${uiBranchName}"){
        //clone ui branch if sqx branch is less than 13...
        if(!checkBranch){
            dir("extensions/cq-form"){
                withCredentials([[$class: 'UsernamePasswordMultiBinding', 
                        credentialsId: 'BitbucketJenkinsCredential', 
                        usernameVariable: 'GIT_USERNAME', 
                        passwordVariable: 'GIT_PASSWORD']]) { 
                    sh 'git fetch https://${GIT_USERNAME}:${GIT_PASSWORD}@bitbucket.org/ambarkaar/cq-form.git'
                    sh "git checkout origin/${uiBranchName}"
                }
                echo "Successfully Checked out cq-form branch: ${uiBranchName}"
            }
        }
    }    
    
    stage('Build CQ'){
        dir('build/antscripts'){
                sh "ant -f project.build.xml -Ddep.sf.username=username@dev.cq.com -DdeployToSF=false initiateBuild"
                sh "rm bin/src/package.xml"
        }           
    }
    
     withCredentials([file(credentialsId: 'SERVER_KEY', variable:'jwt_key_file'), string(credentialsId: 'CLIENT_ID', variable:'cq_consumer_secret')])
    {

        // Authorize the Dev Hub org with JWT key and give it an alias.
        stage('Authorize DevHub') { 
             //Logout from the org 
            sh "sfdx auth:jwt:grant --instanceurl ${instanceUrl} --clientid ${cq_consumer_secret} --username ${devHubUsername} --jwtkeyfile ${jwt_key_file}";
        }
        stage('Concurrent operation to create 10-n no of scratch org'){
            if (fileExists("${JENKINS_HOME}/scratch-org-credentials")) {
                def fileList = sh(script: "ls $JENKINS_HOME/scratch-org-credentials | wc -l", returnStdout: true).trim()
                int numScratchOrgs = fileList as int
                    //Create a total of 10 number of scratch org
                remainingScratchOrgs = 5 - numScratchOrgs
                echo "Number of scratch orgs already created: ${numScratchOrgs}"
                echo "Number of remaining scratch orgs: ${remainingScratchOrgs}"
                for (int i = 0; i < remainingScratchOrgs ; i++) {
                    def vmNumber = i 
                    println i
                def ORG_ALIAS = 'CQDevOrg'+String.valueOf(vmNumber)+String.valueOf(BUILD_NUMBER);
                orgCreations.add(createScratchOrg(ORG_ALIAS))
            }
                parallel ('orgCreations': {orgCreations}, failFast: true )         
            }
        }
    }

    // stage("Genertae a total of 10 scratch org"){
    //     if (fileExists("${JENKINS_HOME}/scratch-org-credentials")) {
    //         def fileList = sh(script: "ls $JENKINS_HOME/scratch-org-credentials | wc -l", returnStdout: true).trim()
    //         int numScratchOrgs = fileList as int
    //             //Create a total of 10 number of scratch org
    //         remainingScratchOrgs = 5 - numScratchOrgs
    //         echo "Number of scratch orgs already created: ${numScratchOrgs}"
    //         echo "Number of remaining scratch orgs: ${remainingScratchOrgs}"
    //          // Create n number of org specified
    //         // for (int i = 0; i<remainingScratchOrgs ; i++) {
                
    //         //     // properties([
    //         //     //     parameters([
    //         //     //         string(name:'sqxBranchName',defaultValue:'DOPS-131', description:'Enter the commit hash or branch number'),
    //         //     //         string(name:'uiBranchName',defaultValue:'12.0.0', description:'Specify cqForm branch to deploy'),
    //         //     //         // string(name:'devHubUsername',defaultValue:'example@devhub.cq.com', description:'Enter Devhub username which will be used to create the scratch org')
    //         //     //     ])
    //         //     // ])
    //         //     // //alias the loop variable to refer it in the closure
    //         //     // def vmNumber = i 
    //         //     // def ORG_ALIAS = 'CQDevOrg'+String.valueOf(vmNumber)+String.valueOf(BUILD_NUMBER);
    //         //     // sh "sfdx force:org:create -a ${ORG_ALIAS} -f test/config/project-scratch-def.json -d 3 -v adarshashrestha957@wise-otter-uzvs4t.com"
    //         //     // sh "sfdx force:user:password:generate -u ${ORG_ALIAS}"
    //         //     // def datas = sh(script: "sfdx force:user:display -u ${ORG_ALIAS} --json", returnStdout: true)
    //         //     // def resultpass = readJSON text: datas
    //         //     // def password = resultpass.result.password
    //         //     // def username = resultpass.result.username
    //         //     //  //Store the credential in jenkins global directory
    //         //     // writeFile file: "$JENKINS_HOME/scratch-org-credentials/${ORG_ALIAS}", text: "${ORG_ALIAS}\n$username\n$password"
                
                
    //         // }
    //         def orgCreations = []
    //         for (int i = 0; i < remainingScratchOrgs ; i++) {
    //             def vmNumber = i 
    //                 println i
    //             def ORG_ALIAS = 'CQDevOrg'+String.valueOf(vmNumber)+String.valueOf(BUILD_NUMBER);
    //             orgCreations.add(createScratchOrg(ORG_ALIAS))
    //             }
    //             parallel ('orgCreations': {orgCreations}, failFast: true )         
    //         }
    // }

}


